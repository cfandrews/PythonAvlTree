[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "avltree"
version = "1.0.0"
description = "Lightweight, pure-python AVL tree"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [{name = "Charles Andrews", email = "cfandrews@outlook.com"}]
dependencies = []

[project.urls]
"Homepage" = "https://github.com/cfandrews/PythonAvlTree"

[project.optional-dependencies]
dev = [
    "black~=23.9.1",
    "isort~=5.12.0",
    "ruff~=0.0.290",
    "mypy~=1.5.1",
    "pytest~=7.4.0",
    "assertpy~=1.1",
    "pytest-cov~=4.1.0",
    "pre-commit~=3.4.0",
    "build~=1.0.3",
]

[tool.ruff]
select = [
    # By default, we enable everything. We take the stance that lint rules should be opt-out and are assumed to be
    # worthwhile rules to have. Should we determine a rule to be incorrect or not useful, we will explicitly disable it.
    # This logic does not apply to nursery rules, such as CPY001, as they are not necessarily developed yet.
    "F",     # Pyflakes
    "E",     # pycodestyle Errors
    "W",     # pycodestyle Warnings
    "I",     # isort
    "C90",   # mccabe
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "CPY",   # flake8-copyright
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "AIR",   # Airflow
    "PERF",  # Perflint
    "RUF",   # Ruff-specific rules
]
ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "E203",   # Whitespace before ':'
]
preview = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

[tool.pytest.ini_options]
addopts = "--cov=avltree --cov-fail-under=100 --cov-report=term-missing tests"

[tool.mypy]
files = ["src", "tests"]
strict = true
pretty = true

[[tool.mypy.overrides]]
module = "assertpy"
ignore_missing_imports = true